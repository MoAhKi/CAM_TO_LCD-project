
#define REG_COM7	0x12
#define REG_CLKRC	0x11
#define REG_COM11	0x3b
#define REG_TSLB	0x3a
#define REG_COM7	0x12
#define REG_RGB444	0x8C
#define REG_COM15	0x40
#define REG_HSTART	0x17
#define REG_HSTOP	0x18
#define REG_HREF	0x32
#define REG_VSTRT 0x19
#define REG_VSTOP	0x1A
#define REG_VREF	0x03
#define REG_COM10 0x15
#define REG_COM3	0x0C
#define REG_COM14 0x3e
#define REG_MVFP	0x1E
#define REG_SCALING_DCWCTR 0x72
#define REG_SCALING_PCLK_DIV 0x73
#define REG_SCALING_XSC 0x70
#define REG_SCALING_YSC 0x71
#define SREG_CALING_PCLK_DELAY 0xa2

#define REG_COM8 0x13
#define REG_COM17 0x42

const uint32_t CHANGE_REG=167;
const uint16_t Debug_Register_Num= 7;


const unsigned char Header1[54]={
	{0x42}, // bitmapSignatureBytes[1]
	{0x4D},	// pixelDataOffset
	
	{0x36},	// Size of the BMP file ( 2*160*120 + 54= 38,454 )
	{0x96},	// 9636
	{0x00},
	{0x00},

	{0x00},	// Application specific
	{0x00},	// 
	{0x00},	// Application specific
	{0x00},	// 

	{0x36},	/*	Offset where the pixel array */
	{0x00},	/*	(bitmap data) can be found: 7A 00 00 00 */
	{0x00},
	{0x00},

	{0x28},	// Number of bytes in the DIB header (from this point)
	{0x00},
	{0x00},
	{0x00},

	{0xA0},	// Width of the bitmap in pixels
	{0x00},
	{0x00},
	{0x00},

	{0x78},	//	Height of the bitmap in pixels. Positive for bottom to top pixel order.
	{0x00},
	{0x00},
	{0x00},

	{0x01},	//	Number of color planes being used
	{0x00},

	{0x10},	//	Number of bits per pixel
	{0x00},

	{0x00},	//	BI_RGB, no pixel array compression used
	{0x00},
	{0x00},
	{0x00},

	{0x00},	//	Size of the raw bitmap data (including padding)
	{0x96},
	{0x00},
	{0x00},

	{0x13},	//	Print resolution of the image,
	{0x0B},
	{0x00},
	{0x00},

	{0x13},	//	Print resolution of the image,
	{0x0B},
	{0x00},
	{0x00},

	{0x00},	//	Number of colors in the palette
	{0x00},
	{0x00},
	{0x00},

	{0x00},	//	0 means all colors are important
	{0x00},
	{0x00},
	{0x00},
};



const uint8_t InitBuffer2[Debug_Register_Num][2]=
{
//	{0x11, 0xc0}, //1100 0000
	{0x11, 0x80}, //1000 0000
	{0x12, 0x0c}, //0000 1100
//	{0x70, 0x00}, //0011 1010
//	{0x71, 0x80}, //0011 0101
	{0x8c, 0x00}, //0000 0000
	{0x40, 0xd0}, //1101 0000
	{0x0c, 0x4c}, //0100 1100
};

const uint8_t QQVGA_RGB565[24][2]=
{
	{REG_COM14, 0x1a},
	{REG_COM15,	0xf0}, //  RGB565
	{REG_COM7,0x04}, // Output format - RGB selection 
	{REG_HSTART,0x16},
	{REG_HSTOP,	0x04},
	{REG_SCALING_DCWCTR, 0x22}, // Vertical & Horizontal down sample by 4
	{REG_SCALING_PCLK_DIV, 0xf2}, // 0x0
	{REG_SCALING_XSC, 0x3A},
	{REG_SCALING_YSC, 0x35},

	{REG_VSTRT,	0x02},
	{REG_VSTOP,	0x7a},
	{REG_HREF,	0x24},
	{REG_VREF,	0x0a},
	{REG_COM3, 0x04}, // DCW enable
	
	{0xB0, 0x8c},

	{REG_TSLB,	0x04},
	{REG_CLKRC, 0x80},
	{REG_COM10,	0x00},
	{REG_RGB444, 0x00},
	{REG_MVFP,0x3f},
	{REG_COM11, 0x0A},
	{SREG_CALING_PCLK_DELAY, 0x02},
	{REG_MVFP,0x07 | (1 ? 0x10:0) | (1 ? 0x20:0)},
	{REG_COM17, 0x08},
};

//(0x13, 0xE5)
//(0x01, 0x84)
//(0x02, 0x4C)

const uint8_t COLOR_SETTING[22][2]=
{
	{0x4f,0xb3},
	{0x50,0xb3},
	{0x51,0x00},
	{0x52,0x3d},
	{0x53,0xa7},
	{0x54,0xe4},
	{0x56,0x40},
	{0x58,0x9e},
	{0x59,0x88},
	{0x5a,0x88},
	{0x5b,0x44},
	{0x5c,0x67},
	{0x5d,0x49},
	{0x5e,0x0e},
	{0x69,0x00},
	{0x6a,0x40},
	{0x6b,0x0a},
	{0x6c,0x0a},
	{0x6d,0x55},
	{0x6e,0x11},
	{0x6f,0x9f},
	{0xb0,0x84}

};

const uint8_t Camera_REG[CHANGE_REG][2]=
{  
	{0x3a, 0x04},
	{0x40, 0xd0},
	{0x12, 0x14},
	{0x32, 0x80},
	{0x17, 0x16},
	{0x18, 0x04},
	{0x19, 0x02},
	{0x1a, 0x7b},
	{0x03, 0x06},
	{0x0c, 0x00}, //0x00
	{0x3e, 0x00},
	{0x70, 0x00},
	{0x71, 0x00},
	{0x72, 0x11},
	{0x73, 0x00},
	{0xa2, 0x02},
	{0x11, 0x40},
	{0x7a, 0x20},
	{0x7b, 0x1c},
	{0x7c, 0x28},
	{0x7d, 0x3c},
	{0x7e, 0x55},
	{0x7f, 0x68},
	{0x80, 0x76},
	{0x81, 0x80},
	{0x82, 0x88},
	{0x83, 0x8f},
	{0x84, 0x96},
	{0x85, 0xa3},
	{0x86, 0xaf},
	{0x87, 0xc4},
	{0x88, 0xd7},
	{0x89, 0xe8},
	{0x13, 0xe0},
	{0x00, 0x00},
	{0x10, 0x00},
	{0x0d, 0x00},
	{0x14, 0x20},
	{0xa5, 0x05},
	{0xab, 0x07},
	{0x24, 0x75},
	{0x25, 0x63},
	{0x26, 0xA5},
	{0x9f, 0x78},
	{0xa0, 0x68},
	{0xa1, 0x03},
	{0xa6, 0xdf},
	{0xa7, 0xdf},
	{0xa8, 0xf0},
	{0xa9, 0x90},
	{0xaa, 0x94},
	{0x13, 0xe5},
	{0x0e, 0x61},
	{0x0f, 0x4b},
	{0x16, 0x02},
	{0x1e, 0x07},//0x07,
	{0x21, 0x02},
	{0x22, 0x91},
	{0x29, 0x07},
	{0x33, 0x0b},
	{0x35, 0x0b},
	{0x37, 0x1d},
	{0x38, 0x71},
	{0x39, 0x2a},
	{0x3c, 0x78},
	{0x4d, 0x40},
	{0x4e, 0x20},
	{0x69, 0x0c},
	{0x6b, 0x60},
	{0x74, 0x19},
	{0x8d, 0x4f},
	{0x8e, 0x00},
	{0x8f, 0x00},
	{0x90, 0x00},
	{0x91, 0x00},
	{0x92, 0x00},
	{0x96, 0x00},
	{0x9a, 0x80},
	{0xb0, 0x84},
	{0xb1, 0x0c},
	{0xb2, 0x0e},
	{0xb3, 0x82},
	{0xb8, 0x0a},
	{0x43, 0x14},
	{0x44, 0xf0},
	{0x45, 0x34},
	{0x46, 0x58},
	{0x47, 0x28},
	{0x48, 0x3a},
	{0x59, 0x88},
	{0x5a, 0x88},
	{0x5b, 0x44},
	{0x5c, 0x67},
	{0x5d, 0x49},
	{0x5e, 0x0e},
	{0x64, 0x04},
	{0x65, 0x20},
	{0x66, 0x05},
	{0x94, 0x04},
	{0x95, 0x08},
	{0x6c, 0x0a},
	{0x6d, 0x55},
	{0x6e, 0x11},
	{0x6f, 0x9f},
	{0x6a, 0x40},
	{0x01, 0x40},	//0x40
	{0x02, 0x40},
	{0x13, 0xe7},
	{0x15, 0x00},
	{0x4f, 0x80},
	{0x50, 0x80},
	{0x51, 0x00},
	{0x52, 0x22},
	{0x53, 0x5e},
	{0x54, 0x80},
	{0x58, 0x9e},	
	{0x41, 0x08},
	{0x3f, 0x00},
	{0x75, 0x05},
	{0x76, 0xe1},
	{0x4c, 0x00},
	{0x77, 0x01},
	{0x3d, 0xc2},	
	{0x4b, 0x09},
	{0xc9, 0x60},
	{0x41, 0x38},
	{0x56, 0x40},	
	{0x34, 0x11},
	{0x3b, 0x02},
	{0xa4, 0x89},
	{0x96, 0x00},
	{0x97, 0x30},
	{0x98, 0x20},
	{0x99, 0x30},
	{0x9a, 0x84},
	{0x9b, 0x29},
	{0x9c, 0x03},
	{0x9d, 0x4c},
	{0x9e, 0x3f},
	{0x78, 0x04},	
	{0x79, 0x01},
	{0xc8, 0xf0},
	{0x79, 0x0f},
	{0xc8, 0x00},
	{0x79, 0x10},
	{0xc8, 0x7e},
	{0x79, 0x0a},
	{0xc8, 0x80},
	{0x79, 0x0b},
	{0xc8, 0x01},
	{0x79, 0x0c},
	{0xc8, 0x0f},
	{0x79, 0x0d},
	{0xc8, 0x20},
	{0x79, 0x09},
	{0xc8, 0x80},
	{0x79, 0x02},
	{0xc8, 0xc0},
	{0x79, 0x03},
	{0xc8, 0x40},
	{0x79, 0x05},
	{0xc8, 0x30},
	{0x79, 0x26},
	{0x09, 0x01},	 //0x03
	{0x55, 0x00},
	{0x56, 0x40},	
	{0x3b, 0x42},	
};



//	i2c1_buf[0]= 0x12; // COM7
//	i2c1_buf[1]= 0x0c;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);

//	i2c1_buf[0]= 0x0C; // COM3  QCIF
//	i2c1_buf[1]= 0x0c;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);

//		
//	i2c1_buf[0]= 0x40; // COM15
//	i2c1_buf[1]= 0xd0;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);


//	i2c1_buf[0]= 0x11; // CLKRC
//	i2c1_buf[1]= 0x80;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,10);
//	HAL_Delay(500);
		
		
		
//	i2c1_buf[0]= 0x71;
//	i2c1_buf[1]= 0x35;
////	i2c1_buf[1]= 0xf0;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);

//	i2c1_buf[0]= 0x70;
//	i2c1_buf[1]= 0x3A;
////	i2c1_buf[1]= 0xf0;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);

//	i2c1_buf[0]= 0x72;
//	i2c1_buf[1]= 0x3A;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(500);


//	i2c1_buf[0]= 0x3E; // COM14
//	i2c1_buf[1]= 0x11;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	wait_fun(5000);
		

//		//(Reg Name: )


//	i2c1_buf[0]= 0x3A; // TSLB
//	i2c1_buf[1]= 0x0D;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	wait_fun(1000);
		

//	i2c1_buf[0]= 0x8E; // COM14
//	i2c1_buf[1]= 0x08;
//	HAL_I2C_Master_Transmit(&hi2c1, CAM_write_add, i2c1_buf,2,100);
//	HAL_Delay(10);

	
// WriteReg(REG_CLKRC,0x80);
//        WriteReg(REG_COM11,0x0A) ;
//        WriteReg(REG_TSLB,0x04);
//        WriteReg(REG_COM7,0x04) ;
//        WriteReg(REG_RGB444, 0x00);
//        WriteReg(REG_COM15, 0xd0);
//        WriteReg(REG_HSTART,0x16) ;
//        WriteReg(REG_HSTOP,0x04) ;
//        WriteReg(REG_HREF,0x24) ;
//        WriteReg(REG_VSTART,0x02) ;
//        WriteReg(REG_VSTOP,0x7a) ;
//        WriteReg(REG_VREF,0x0a) ;
//        WriteReg(REG_COM10,0x02) ;
//        WriteReg(REG_COM3, 0x04);
//        WriteReg(REG_COM14, 0x1a);
//        WriteReg(REG_MVFP,0x07 | (flipv ? 0x10:0) | (fliph ? 0x20:0)) ;
//        WriteReg(0x72, 0x22);
//        WriteReg(0x73, 0xf2);
// 
//        // COLOR SETTING
//        WriteReg(0x4f,0x80);
//        WriteReg(0x50,0x80);
//        WriteReg(0x51,0x00);
//        WriteReg(0x52,0x22);
//        WriteReg(0x53,0x5e);
//        WriteReg(0x54,0x80);
//        WriteReg(0x56,0x40);
//        WriteReg(0x58,0x9e);
//        WriteReg(0x59,0x88);
//        WriteReg(0x5a,0x88);
//        WriteReg(0x5b,0x44);
//        WriteReg(0x5c,0x67);
//        WriteReg(0x5d,0x49);
//        WriteReg(0x5e,0x0e);
//        WriteReg(0x69,0x00);
//        WriteReg(0x6a,0x40);
//        WriteReg(0x6b,0x0a);
//        WriteReg(0x6c,0x0a);
//        WriteReg(0x6d,0x55);
//        WriteReg(0x6e,0x11);
//        WriteReg(0x6f,0x9f);
// 
//        WriteReg(0xb0,0x84);